// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	jwk "khanhanhtr/sample/internal/jwk"

	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"
)

// JWKSProvider is an autogenerated mock type for the JWKSProvider type
type JWKSProvider struct {
	mock.Mock
}

type JWKSProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *JWKSProvider) EXPECT() *JWKSProvider_Expecter {
	return &JWKSProvider_Expecter{mock: &_m.Mock}
}

// KeyFunc provides a mock function with given fields: _a0
func (_m *JWKSProvider) KeyFunc(_a0 jwk.SignatureAlgorithm) func(*jwt.Token) (interface{}, error) {
	ret := _m.Called(_a0)

	var r0 func(*jwt.Token) (interface{}, error)
	if rf, ok := ret.Get(0).(func(jwk.SignatureAlgorithm) func(*jwt.Token) (interface{}, error)); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*jwt.Token) (interface{}, error))
		}
	}

	return r0
}

// JWKSProvider_KeyFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyFunc'
type JWKSProvider_KeyFunc_Call struct {
	*mock.Call
}

// KeyFunc is a helper method to define mock.On call
//   - _a0 jwk.SignatureAlgorithm
func (_e *JWKSProvider_Expecter) KeyFunc(_a0 interface{}) *JWKSProvider_KeyFunc_Call {
	return &JWKSProvider_KeyFunc_Call{Call: _e.mock.On("KeyFunc", _a0)}
}

func (_c *JWKSProvider_KeyFunc_Call) Run(run func(_a0 jwk.SignatureAlgorithm)) *JWKSProvider_KeyFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(jwk.SignatureAlgorithm))
	})
	return _c
}

func (_c *JWKSProvider_KeyFunc_Call) Return(_a0 func(*jwt.Token) (interface{}, error)) *JWKSProvider_KeyFunc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JWKSProvider_KeyFunc_Call) RunAndReturn(run func(jwk.SignatureAlgorithm) func(*jwt.Token) (interface{}, error)) *JWKSProvider_KeyFunc_Call {
	_c.Call.Return(run)
	return _c
}

// NewJWKSProvider creates a new instance of JWKSProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWKSProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWKSProvider {
	mock := &JWKSProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
