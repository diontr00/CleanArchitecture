// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	mongo "khanhanhtr/sample/mongo"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// Client provides a mock function with given fields:
func (_m *Database) Client() mongo.Client {
	ret := _m.Called()

	var r0 mongo.Client
	if rf, ok := ret.Get(0).(func() mongo.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Client)
		}
	}

	return r0
}

// Database_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type Database_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *Database_Expecter) Client() *Database_Client_Call {
	return &Database_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *Database_Client_Call) Run(run func()) *Database_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Client_Call) Return(_a0 mongo.Client) *Database_Client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Client_Call) RunAndReturn(run func() mongo.Client) *Database_Client_Call {
	_c.Call.Return(run)
	return _c
}

// UseCollection provides a mock function with given fields: collName
func (_m *Database) UseCollection(collName string) mongo.Collection {
	ret := _m.Called(collName)

	var r0 mongo.Collection
	if rf, ok := ret.Get(0).(func(string) mongo.Collection); ok {
		r0 = rf(collName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Collection)
		}
	}

	return r0
}

// Database_UseCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseCollection'
type Database_UseCollection_Call struct {
	*mock.Call
}

// UseCollection is a helper method to define mock.On call
//   - collName string
func (_e *Database_Expecter) UseCollection(collName interface{}) *Database_UseCollection_Call {
	return &Database_UseCollection_Call{Call: _e.mock.On("UseCollection", collName)}
}

func (_c *Database_UseCollection_Call) Run(run func(collName string)) *Database_UseCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_UseCollection_Call) Return(_a0 mongo.Collection) *Database_UseCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UseCollection_Call) RunAndReturn(run func(string) mongo.Collection) *Database_UseCollection_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
