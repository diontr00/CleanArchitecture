// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"

	translator "khanhanhtr/sample/translator"

	validator "github.com/go-playground/validator"
)

// Translator is an autogenerated mock type for the Translator type
type Translator struct {
	mock.Mock
}

type Translator_Expecter struct {
	mock *mock.Mock
}

func (_m *Translator) EXPECT() *Translator_Expecter {
	return &Translator_Expecter{mock: &_m.Mock}
}

// TranslateMessage provides a mock function with given fields: c, key, param, plurals
func (_m *Translator) TranslateMessage(c *fiber.Ctx, key string, param translator.ParamConfig, plurals interface{}) string {
	ret := _m.Called(c, key, param, plurals)

	var r0 string
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, string, translator.ParamConfig, interface{}) string); ok {
		r0 = rf(c, key, param, plurals)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Translator_TranslateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranslateMessage'
type Translator_TranslateMessage_Call struct {
	*mock.Call
}

// TranslateMessage is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - key string
//   - param translator.ParamConfig
//   - plurals interface{}
func (_e *Translator_Expecter) TranslateMessage(c interface{}, key interface{}, param interface{}, plurals interface{}) *Translator_TranslateMessage_Call {
	return &Translator_TranslateMessage_Call{Call: _e.mock.On("TranslateMessage", c, key, param, plurals)}
}

func (_c *Translator_TranslateMessage_Call) Run(run func(c *fiber.Ctx, key string, param translator.ParamConfig, plurals interface{})) *Translator_TranslateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(string), args[2].(translator.ParamConfig), args[3].(interface{}))
	})
	return _c
}

func (_c *Translator_TranslateMessage_Call) Return(_a0 string) *Translator_TranslateMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Translator_TranslateMessage_Call) RunAndReturn(run func(*fiber.Ctx, string, translator.ParamConfig, interface{}) string) *Translator_TranslateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// TranslateValidationError provides a mock function with given fields: ctx, fields, plurals
func (_m *Translator) TranslateValidationError(ctx *fiber.Ctx, fields validator.FieldError, plurals interface{}) string {
	ret := _m.Called(ctx, fields, plurals)

	var r0 string
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, validator.FieldError, interface{}) string); ok {
		r0 = rf(ctx, fields, plurals)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Translator_TranslateValidationError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranslateValidationError'
type Translator_TranslateValidationError_Call struct {
	*mock.Call
}

// TranslateValidationError is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - fields validator.FieldError
//   - plurals interface{}
func (_e *Translator_Expecter) TranslateValidationError(ctx interface{}, fields interface{}, plurals interface{}) *Translator_TranslateValidationError_Call {
	return &Translator_TranslateValidationError_Call{Call: _e.mock.On("TranslateValidationError", ctx, fields, plurals)}
}

func (_c *Translator_TranslateValidationError_Call) Run(run func(ctx *fiber.Ctx, fields validator.FieldError, plurals interface{})) *Translator_TranslateValidationError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(validator.FieldError), args[2].(interface{}))
	})
	return _c
}

func (_c *Translator_TranslateValidationError_Call) Return(_a0 string) *Translator_TranslateValidationError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Translator_TranslateValidationError_Call) RunAndReturn(run func(*fiber.Ctx, validator.FieldError, interface{}) string) *Translator_TranslateValidationError_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRequest provides a mock function with given fields: ctx, _a1, validateStruct
func (_m *Translator) ValidateRequest(ctx *fiber.Ctx, _a1 *validator.Validate, validateStruct interface{}) []string {
	ret := _m.Called(ctx, _a1, validateStruct)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *validator.Validate, interface{}) []string); ok {
		r0 = rf(ctx, _a1, validateStruct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Translator_ValidateRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRequest'
type Translator_ValidateRequest_Call struct {
	*mock.Call
}

// ValidateRequest is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - _a1 *validator.Validate
//   - validateStruct interface{}
func (_e *Translator_Expecter) ValidateRequest(ctx interface{}, _a1 interface{}, validateStruct interface{}) *Translator_ValidateRequest_Call {
	return &Translator_ValidateRequest_Call{Call: _e.mock.On("ValidateRequest", ctx, _a1, validateStruct)}
}

func (_c *Translator_ValidateRequest_Call) Run(run func(ctx *fiber.Ctx, _a1 *validator.Validate, validateStruct interface{})) *Translator_ValidateRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(*validator.Validate), args[2].(interface{}))
	})
	return _c
}

func (_c *Translator_ValidateRequest_Call) Return(_a0 []string) *Translator_ValidateRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Translator_ValidateRequest_Call) RunAndReturn(run func(*fiber.Ctx, *validator.Validate, interface{}) []string) *Translator_ValidateRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewTranslator creates a new instance of Translator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTranslator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Translator {
	mock := &Translator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
