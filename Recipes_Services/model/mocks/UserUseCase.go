// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "khanhanhtr/sample/model"

	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

type UserUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *UserUseCase) EXPECT() *UserUseCase_Expecter {
	return &UserUseCase_Expecter{mock: &_m.Mock}
}

// CreateUserByPass provides a mock function with given fields: ctx, user
func (_m *UserUseCase) CreateUserByPass(ctx context.Context, user *model.UserSignUpRequest) (*model.UserSignUpResponse, error) {
	ret := _m.Called(ctx, user)

	var r0 *model.UserSignUpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserSignUpRequest) (*model.UserSignUpResponse, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserSignUpRequest) *model.UserSignUpResponse); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserSignUpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UserSignUpRequest) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUseCase_CreateUserByPass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserByPass'
type UserUseCase_CreateUserByPass_Call struct {
	*mock.Call
}

// CreateUserByPass is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.UserSignUpRequest
func (_e *UserUseCase_Expecter) CreateUserByPass(ctx interface{}, user interface{}) *UserUseCase_CreateUserByPass_Call {
	return &UserUseCase_CreateUserByPass_Call{Call: _e.mock.On("CreateUserByPass", ctx, user)}
}

func (_c *UserUseCase_CreateUserByPass_Call) Run(run func(ctx context.Context, user *model.UserSignUpRequest)) *UserUseCase_CreateUserByPass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.UserSignUpRequest))
	})
	return _c
}

func (_c *UserUseCase_CreateUserByPass_Call) Return(_a0 *model.UserSignUpResponse, _a1 error) *UserUseCase_CreateUserByPass_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserUseCase_CreateUserByPass_Call) RunAndReturn(run func(context.Context, *model.UserSignUpRequest) (*model.UserSignUpResponse, error)) *UserUseCase_CreateUserByPass_Call {
	_c.Call.Return(run)
	return _c
}

// GetIDTokenByPass provides a mock function with given fields: ctx, user
func (_m *UserUseCase) GetIDTokenByPass(ctx context.Context, user *model.UserSigninRequest) (*model.UserSigninResponse, error) {
	ret := _m.Called(ctx, user)

	var r0 *model.UserSigninResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserSigninRequest) (*model.UserSigninResponse, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserSigninRequest) *model.UserSigninResponse); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserSigninResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UserSigninRequest) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUseCase_GetIDTokenByPass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIDTokenByPass'
type UserUseCase_GetIDTokenByPass_Call struct {
	*mock.Call
}

// GetIDTokenByPass is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.UserSigninRequest
func (_e *UserUseCase_Expecter) GetIDTokenByPass(ctx interface{}, user interface{}) *UserUseCase_GetIDTokenByPass_Call {
	return &UserUseCase_GetIDTokenByPass_Call{Call: _e.mock.On("GetIDTokenByPass", ctx, user)}
}

func (_c *UserUseCase_GetIDTokenByPass_Call) Run(run func(ctx context.Context, user *model.UserSigninRequest)) *UserUseCase_GetIDTokenByPass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.UserSigninRequest))
	})
	return _c
}

func (_c *UserUseCase_GetIDTokenByPass_Call) Return(_a0 *model.UserSigninResponse, _a1 error) *UserUseCase_GetIDTokenByPass_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserUseCase_GetIDTokenByPass_Call) RunAndReturn(run func(context.Context, *model.UserSigninRequest) (*model.UserSigninResponse, error)) *UserUseCase_GetIDTokenByPass_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
