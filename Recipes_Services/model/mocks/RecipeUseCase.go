// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "khanhanhtr/sample/model"

	mock "github.com/stretchr/testify/mock"
)

// RecipeUseCase is an autogenerated mock type for the RecipeUseCase type
type RecipeUseCase struct {
	mock.Mock
}

type RecipeUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *RecipeUseCase) EXPECT() *RecipeUseCase_Expecter {
	return &RecipeUseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: c, receipe
func (_m *RecipeUseCase) Create(c context.Context, receipe *model.Recipe) (interface{}, error) {
	ret := _m.Called(c, receipe)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Recipe) (interface{}, error)); ok {
		return rf(c, receipe)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Recipe) interface{}); ok {
		r0 = rf(c, receipe)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Recipe) error); ok {
		r1 = rf(c, receipe)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecipeUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RecipeUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - c context.Context
//   - receipe *model.Recipe
func (_e *RecipeUseCase_Expecter) Create(c interface{}, receipe interface{}) *RecipeUseCase_Create_Call {
	return &RecipeUseCase_Create_Call{Call: _e.mock.On("Create", c, receipe)}
}

func (_c *RecipeUseCase_Create_Call) Run(run func(c context.Context, receipe *model.Recipe)) *RecipeUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Recipe))
	})
	return _c
}

func (_c *RecipeUseCase_Create_Call) Return(_a0 interface{}, _a1 error) *RecipeUseCase_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RecipeUseCase_Create_Call) RunAndReturn(run func(context.Context, *model.Recipe) (interface{}, error)) *RecipeUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: c, id
func (_m *RecipeUseCase) Delete(c context.Context, id string) (int64, error) {
	ret := _m.Called(c, id)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecipeUseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RecipeUseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - c context.Context
//   - id string
func (_e *RecipeUseCase_Expecter) Delete(c interface{}, id interface{}) *RecipeUseCase_Delete_Call {
	return &RecipeUseCase_Delete_Call{Call: _e.mock.On("Delete", c, id)}
}

func (_c *RecipeUseCase_Delete_Call) Run(run func(c context.Context, id string)) *RecipeUseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RecipeUseCase_Delete_Call) Return(_a0 int64, _a1 error) *RecipeUseCase_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RecipeUseCase_Delete_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *RecipeUseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: c, options
func (_m *RecipeUseCase) Get(c context.Context, options *model.FindOptions) ([]model.Recipe, error) {
	ret := _m.Called(c, options)

	var r0 []model.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.FindOptions) ([]model.Recipe, error)); ok {
		return rf(c, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.FindOptions) []model.Recipe); ok {
		r0 = rf(c, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.FindOptions) error); ok {
		r1 = rf(c, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecipeUseCase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RecipeUseCase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - c context.Context
//   - options *model.FindOptions
func (_e *RecipeUseCase_Expecter) Get(c interface{}, options interface{}) *RecipeUseCase_Get_Call {
	return &RecipeUseCase_Get_Call{Call: _e.mock.On("Get", c, options)}
}

func (_c *RecipeUseCase_Get_Call) Run(run func(c context.Context, options *model.FindOptions)) *RecipeUseCase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.FindOptions))
	})
	return _c
}

func (_c *RecipeUseCase_Get_Call) Return(_a0 []model.Recipe, _a1 error) *RecipeUseCase_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RecipeUseCase_Get_Call) RunAndReturn(run func(context.Context, *model.FindOptions) ([]model.Recipe, error)) *RecipeUseCase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: c, id
func (_m *RecipeUseCase) GetById(c context.Context, id string) (model.Recipe, error) {
	ret := _m.Called(c, id)

	var r0 model.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Recipe, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Recipe); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(model.Recipe)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecipeUseCase_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type RecipeUseCase_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - c context.Context
//   - id string
func (_e *RecipeUseCase_Expecter) GetById(c interface{}, id interface{}) *RecipeUseCase_GetById_Call {
	return &RecipeUseCase_GetById_Call{Call: _e.mock.On("GetById", c, id)}
}

func (_c *RecipeUseCase_GetById_Call) Run(run func(c context.Context, id string)) *RecipeUseCase_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RecipeUseCase_GetById_Call) Return(_a0 model.Recipe, _a1 error) *RecipeUseCase_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RecipeUseCase_GetById_Call) RunAndReturn(run func(context.Context, string) (model.Recipe, error)) *RecipeUseCase_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function with given fields: c, id, recipe
func (_m *RecipeUseCase) UpdateOne(c context.Context, id string, recipe *model.Recipe) (int64, error) {
	ret := _m.Called(c, id, recipe)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Recipe) (int64, error)); ok {
		return rf(c, id, recipe)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Recipe) int64); ok {
		r0 = rf(c, id, recipe)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *model.Recipe) error); ok {
		r1 = rf(c, id, recipe)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecipeUseCase_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type RecipeUseCase_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - c context.Context
//   - id string
//   - recipe *model.Recipe
func (_e *RecipeUseCase_Expecter) UpdateOne(c interface{}, id interface{}, recipe interface{}) *RecipeUseCase_UpdateOne_Call {
	return &RecipeUseCase_UpdateOne_Call{Call: _e.mock.On("UpdateOne", c, id, recipe)}
}

func (_c *RecipeUseCase_UpdateOne_Call) Run(run func(c context.Context, id string, recipe *model.Recipe)) *RecipeUseCase_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*model.Recipe))
	})
	return _c
}

func (_c *RecipeUseCase_UpdateOne_Call) Return(_a0 int64, _a1 error) *RecipeUseCase_UpdateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RecipeUseCase_UpdateOne_Call) RunAndReturn(run func(context.Context, string, *model.Recipe) (int64, error)) *RecipeUseCase_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewRecipeUseCase creates a new instance of RecipeUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecipeUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecipeUseCase {
	mock := &RecipeUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
